using System;
using System.Windows.Forms;
using System.Security.Cryptography;
using System.Drawing;

namespace AlmacenamientoApp
{
    public partial class Form1 : Form
    {
        private string rutaDatos = "C:\\Datos";
        private string icono = "icono.ico";
        private Aes aes;

        public Form1()
        {
            InitializeComponent();
            this.Icon = new Icon(icono);
            this.Text = "Almacenamiento de Datos - Creado por MSC";
            aes = Aes.Create();
            GenerarClaveYIV();
        }

        private void GenerarClaveYIV()
        {
            // Generar clave y vector de inicializaci√≥n (IV) aleatorios
            byte[] clave = new byte[32];
            byte[] iv = new byte[16];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(clave);
                rng.GetBytes(iv);
            }
            aes.Key = clave;
            aes.IV = iv;
        }

        private void btnAgregarInformacion_Click(object sender, EventArgs e)
        {
            string clave = txtClave.Text;
            string valor = txtValor.Text;
            if (!string.IsNullOrEmpty(clave) && !string.IsNullOrEmpty(valor))
            {
                AgregarInformacion(clave, valor);
            }
            else
            {
                MessageBox.Show("Ingrese la clave y el valor");
            }
        }

        private void AgregarInformacion(string clave, string valor)
        {
            string rutaArchivo = Path.Combine(rutaDatos, clave + ".txt");
            byte[] datos = Encoding.UTF8.GetBytes(valor);
            byte[] datosCifrados = Cifrar(datos);
            File.WriteAllBytes(rutaArchivo, datosCifrados);
            AgregarRegistro(clave, valor);
        }

        private byte[] Cifrar(byte[] datos)
        {
            ICryptoTransform transform = aes.CreateEncryptor();
            byte[] datosCifrados = transform.TransformFinalBlock(datos, 0, datos.Length);
            return datosCifrados;
        }

        private void RevisarDatos()
        {
            string rutaRegistro = Path.Combine(rutaDatos, "registro.txt");
            string[] registros = File.ReadAllLines(rutaRegistro);
            listBox1.Items.Clear();
            foreach (string registro in registros)
            {
                listBox1.Items.Add(registro);
            }
        }

        private void EliminarDatos(string clave)
        {
            string rutaArchivo = Path.Combine(rutaDatos, clave + ".txt");
            if (File.Exists(rutaArchivo))
            {
                File.Delete(rutaArchivo);
                MessageBox.Show("Datos eliminados correctamente");
            }
            else
            {
                MessageBox.Show("No se encontraron datos para eliminar");
            }
        }

        private void EditarDatos(string clave, string valor)
        {
            string rutaArchivo = Path.Combine(rutaDatos, clave + ".txt");
            if (File.Exists(rutaArchivo))
            {
                byte[] datosCifrados = File.ReadAllBytes(rutaArchivo);
                byte[] datos = Descifrar(datosCifrados);
                string valorActual = Encoding.UTF8.GetString(datos);
                valorActual = valor;
                datos = Encoding.UTF8.GetBytes(valorActual);
                datosCifrados = Cifrar(datos);
                File.WriteAllBytes(rutaArchivo, datosCifrados);
                MessageBox.Show("Datos editados correctamente");
            }
            else
            {
                MessageBox.Show("No se encontraron datos para editar");
            }
        }

        private byte[] Descifrar(byte[] datosCifrados)
        {
            ICryptoTransform transform = aes.CreateDecryptor();
            byte[] datos = transform.TransformFinalBlock(datosCifrados, 0, datosCifrados.Length);
            return datos;
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;
            Font font = new Font("Arial", 12);
            Brush brush = new SolidBrush(Color.FromArgb(150, Color.Gray));
            g.DrawString("Creado por MSC", font, brush, 10, 10);
        }
    }
}
